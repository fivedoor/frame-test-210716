{
  "_args": [
    [
      "unicode-dragon@^0.1.3",
      "/Users/fivedoor/Documents/development/fivedoor-email-frame/node_modules/detergent"
    ]
  ],
  "_from": "unicode-dragon@>=0.1.3 <0.2.0",
  "_id": "unicode-dragon@0.1.3",
  "_inCache": true,
  "_installable": true,
  "_location": "/unicode-dragon",
  "_npmUser": {
    "email": "conrad.irwin@gmail.com",
    "name": "cirwin"
  },
  "_npmVersion": "1.3.8",
  "_phantomChildren": {},
  "_requested": {
    "name": "unicode-dragon",
    "raw": "unicode-dragon@^0.1.3",
    "rawSpec": "^0.1.3",
    "scope": null,
    "spec": ">=0.1.3 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/detergent"
  ],
  "_resolved": "https://registry.npmjs.org/unicode-dragon/-/unicode-dragon-0.1.3.tgz",
  "_shasum": "ef7d25028690cc22170de8f02f93814494543455",
  "_shrinkwrap": null,
  "_spec": "unicode-dragon@^0.1.3",
  "_where": "/Users/fivedoor/Documents/development/fivedoor-email-frame/node_modules/detergent",
  "bugs": {
    "url": "https://github.com/ConradIrwin/unicode-dragon/issues"
  },
  "dependencies": {},
  "description": "Eats invalid unicode for breakfast. Replaces unmatched surrogate pairs by U+FFFD",
  "devDependencies": {
    "mocha": "latest"
  },
  "directories": {},
  "dist": {
    "shasum": "ef7d25028690cc22170de8f02f93814494543455",
    "tarball": "https://registry.npmjs.org/unicode-dragon/-/unicode-dragon-0.1.3.tgz"
  },
  "homepage": "https://github.com/ConradIrwin/unicode-dragon",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "email": "conrad.irwin@gmail.com",
      "name": "cirwin"
    }
  ],
  "name": "unicode-dragon",
  "optionalDependencies": {},
  "readme": "\n# Unicode dragon <big><big><a title=\"&#x1f409;\" href=\"http://www.fileformat.info/info/unicode/char/1f409/index.htm\">üêâ </a></big></big>\n\nThere's [a bug](https://code.google.com/p/v8/issues/detail?id=2875) in V8 which\nmeans that in rare circumstances Node strings can contain invalid Unicode.\n\nAs this is an abhorrent situation, you should use `unicode-dragon` to ensure\nthat any untrusted user input is actually valid unicode before saving it to\nyour database.\n\n## Installation\n\nYou can install unicode-dragon with npm. If you're really desperate, you can\nalso copy-pasted the function out of index.js into whereever you need.\n\n```shell\nnpm install unicode-dragon\n```\n\n## Usage\n\n```javascript\nunicodeDragon = require('unicode-dragon');\nvar validString = unicodeDragon(buffer.toString('utf-8'));\n```\n\n## Details\n\nV8 strings are internally UCS-2, which is a legacy Unicode encoding that only\nworks with Unicode 1.0. In Unicode 2.0, 2048 code-points (U+D800 - U+DFFF) were\nremoved from Unicode and are used by UTF-16 in surrogate pairs to represent\ncode-points higher than U+FFFF (which is the highest UCS-2 can support).\n\nThat said, the UTF-8 codecs in V8 can support characters greater than U+FFFF as\nthough the internal strings were UTF-16. This is awesome, but there's a small\nmistake, and V8 will accidentally parse invalid UTF-8 that happens to include\none of the removed surrogate code-points.\n\nIn the case that there is a valid surrogate pair, this is fine, as internally\nthe UCS-2 buffer is now valid UTF-16, and so the encoder will re-encode it to\nvalid UTF-8. (UTF-8 with surrogate pairs is more properly known as CESU-8, and\nis a frowned upon hack). This is definitely not fine however in the case were\nthe surrogates appear individually, or incorrectly paired. As the UTF-8 encoder\nwill output another invalid surrogate.\n\nAnd if that makes your brain hurt, stay safe, and use `unicodeDragon` to guard\nyourself from invalid user input.\n\n## Meta-fu\n\nUnicode-dragon is licensed under the MIT licence. Bug-reports and contributions\nare welcome.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ConradIrwin/unicode-dragon.git"
  },
  "scripts": {
    "test": "mocha test"
  },
  "version": "0.1.3"
}
